{"version":3,"sources":["graph.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GraphComponent","props","myRef","createRef","height","width","React","useState","state","setState","options","interaction","hover","edges","arrows","to","manipulation","enabled","manipulate","addNode","nodeData","callback","letter","svg","abbrev","url","encodeURIComponent","label","shape","image","graph","nodes","push","id","updateParent","console","log","addEdge","edgeData","deleteNode","i","length","j","splice","deleteEdge","processGraph","data","node","Object","assign","useEffect","divElement","current","network","Network","setOptions","className","ref","App","currentGraph","graphs","name","onChange","e","select_str","target","value","returnValue","graph_name","makeGraphs","terminality","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a203d04.chunk.js","sourcesContent":["import React, { createRef, useEffect, useContext } from 'react';\nimport { Network } from \"vis-network/standalone/esm/vis-network\"\nimport { Letter } from './util/alphabet';\nimport { IGraph } from './util/graph';\n\ninterface Props {\n    graph: IGraph,\n    width?: number,\n    height?: number,\n    updateParent?: () => void,\n    manipulate: boolean\n    letter: Letter\n}\n\nexport function GraphComponent(props: Props) {\n\n    const myRef = createRef<HTMLDivElement>();\n    const largeHeight = props.height == null ? 100 : props.height\n    const largeWidth = props.width == null ? 100 : props.width\n\n\n    var network = {}\n\n    const [state, setState] = React.useState({});\n    const handleAddNode = (nodeData: any, callback: any) => {\n\n        if (!props.letter) {\n            console.log(\"this is where I should alter the user that no icon is selected\")\n            return\n        }\n        var svg =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\">' +\n            '<circle cx=\"37.5\" cy=\"37.5\" r=\"35\" fill=\"#aeaeae\" />' +\n            '<text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" font-size=\"x-large\" font-family=\"Arial\" dy=\".3em\">' + props.letter.abbrev + '</text>' +\n            'Sorry, your browser does not support inline SVG.' +\n            \"</svg>\";\n\n        var url = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svg);\n        /* console.log(svg);\n         * console.log(url); */\n\n        nodeData.label = props.letter.label;\n        nodeData.shape = \"circularImage\";\n        nodeData.abbrev = props.letter.abbrev\n        nodeData.image = url;\n        callback(nodeData);\n        props.graph.nodes.push({ label: nodeData.label, abbrev: nodeData.abbrev, id: nodeData.id });\n        if (props.updateParent) {\n            props.updateParent();\n        }\n    }\n\n    const handleAddEdge = (edgeData: any, callback: any) => {\n        callback(edgeData);\n        props.graph.edges.push(edgeData)\n        if (props.updateParent) {\n            props.updateParent();\n        }\n    }\n\n\n    const handleDeleteNode = (nodeData: any, callback: any) => {\n        callback(nodeData);\n        for (var i = 0; i < nodeData.nodes.length; i++) {\n            for (var j = 0; j < props.graph.nodes.length; j++) {\n                if (nodeData.nodes == props.graph.nodes[j].id) {\n                    props.graph.nodes.splice(j, 1);\n                }\n            }\n        }\n        for (var i = 0; i < nodeData.edges.length; i++) {\n            for (var j = 0; j < props.graph.edges.length; j++) {\n                if (nodeData.edges == props.graph.edges[j].id) {\n                    props.graph.edges.splice(j, 1);\n                }\n            }\n        }\n        if (props.updateParent) {\n            props.updateParent();\n        }\n    }\n    const handleDeleteEdge = (edgeData: any, callback: any) => {\n        callback(edgeData);\n        for (var i = 0; i < edgeData.edges.length; i++) {\n            for (var j = 0; j < props.graph.edges.length; j++) {\n                if (edgeData.edges == props.graph.edges[j].id) {\n                    props.graph.edges.splice(j, 1);\n                }\n            }\n        }\n        if (props.updateParent) {\n            props.updateParent();\n        }\n    }\n    var options = {\n        interaction: { hover: true },\n        edges: {\n            arrows: { to: true}\n        },\n        manipulation: {\n            enabled: props.manipulate,\n            addNode: handleAddNode,\n            addEdge: handleAddEdge,\n            deleteNode: handleDeleteNode,\n            deleteEdge: handleDeleteEdge\n        },\n\n    }\n\n    // create an array with edges\n\n    /* var data = {\n     *     nodes: props.graph.nodes,\n     *     edges: props.graph.edges,\n     * }; */\n\n    var processGraph = (graph: IGraph) => {\n\n        var nodes: Array<any> = []\n        var edges: Array<any> = []\n        var data = { nodes: nodes, edges: edges }\n\n        for (var i = 0; i < graph.nodes.length; i++) {\n            var node: any = Object.assign({}, graph.nodes[i]);\n            var svg =\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\">' +\n                '<circle cx=\"37.5\" cy=\"37.5\" r=\"35\" fill=\"#aeaeae\" />' +\n                '<text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" font-size=\"x-large\" font-family=\"Arial\" dy=\".3em\">' + graph.nodes[i].abbrev + '</text>' +\n                'Sorry, your browser does not support inline SVG.' +\n                \"</svg>\";\n\n            var url = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svg);\n\n            node.shape = \"circularImage\";\n            node.image = url;\n            data.nodes.push(node)\n        }\n        data.edges = graph.edges\n\n        return data\n    }\n\n    const graphs = [\"first\", \"second\", \"third\"]\n\n    const handleChange = (e:any) =>{\n        return\n    }\n    useEffect(() => {\n\n        var divElement = myRef.current\n        if (divElement == null) {\n            return;\n        }\n\n        processGraph(props.graph)\n\n        var data = processGraph(props.graph)\n        var network = new Network(divElement, data, options)\n        setState(network)\n\n        if (props.updateParent) {\n            props.updateParent();\n        }\n\n    }, [props.graph]);\n    useEffect(() => {\n        //I hate myself\n        if (state instanceof Network) {\n            state.setOptions(options);\n        }\n    }, [props.letter]);\n\n    return (\n        <div className=\"graphWindow\" ref={myRef} >\n        </div>\n\n    )\n\n}\n","\nimport React from 'react';\nimport './App.css';\nimport {GraphComponent} from \"./graph.component\"\nimport { IGraph } from './util/graph';\nimport graphs from './graphs.json';\nfunction App() {\n  const emptyGraph: IGraph =\n  {\n    nodes: [\n      {\n        label: 'Start',\n        id: 'dceb748f-7d66-4194-8200-a1e33fc4cb34',\n        abbrev: 'S'\n      },\n      {\n        label: 'End',\n        id: 'b0bd97f9-d157-489e-b443-4bdf89b1fd4d',\n        abbrev: 'E'\n      }\n\n    ],\n    edges: [\n      {\n        from: 'dceb748f-7d66-4194-8200-a1e33fc4cb34',\n        to: 'b0bd97f9-d157-489e-b443-4bdf89b1fd4d',\n        id: '20246849-4cf3-4d22-b1e5-f49577f054dc'\n      }\n    ]\n  }\n  const emptyLetter = {\n    label: \"\",\n    abbrev: \"\",\n    terminality: false\n  }\n    const [state, setState] = React.useState({ currentGraph: graphs[\"graph_0\"] });\n\n    const makeGraphs = () => {\n        var returnValue:any[] = []\n        for (var graph_name in graphs){\n            returnValue.push(\n                <option value={graph_name}>{graph_name}</option>\n            )\n        }\n        return returnValue\n    }\n\n    const handleChange = (e:any) =>{\n        console.log()\n        const select_str:keyof typeof graphs = e.target.value\n        setState({currentGraph: graphs[select_str]})\n    }\n    return (\n      <div>\n          <select name=\"graphs_menu\" id=\"graphs_menu\" onChange={handleChange}>\n              {makeGraphs()}\n          </select>\n          <GraphComponent graph={state.currentGraph} letter={emptyLetter} manipulate={false}/>\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}